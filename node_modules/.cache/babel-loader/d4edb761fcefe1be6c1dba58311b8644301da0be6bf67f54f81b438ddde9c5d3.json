{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  chips: []\n};\nexport const ChipSlice = createSlice({\n  name: \"chip\",\n  initialState,\n  reducers: {\n    addChip: (state, action) => {\n      state.chips.push(action.payload);\n    },\n    removeChip: (state, action) => {\n      let slugs = [...state.chips];\n      const index = slugs.findIndex(x => x.id === action.payload.id);\n      slugs.splice(index, 1, {\n        ...action.payload\n      });\n      state.chips = slugs;\n    }\n    // removeChip: (state, action: PayloadAction<any>) => {\n    //   let slugs = [...state.data];\n\n    //   const index = slugs.findIndex((x) => x.id === action.payload.id);\n    //   slugs.splice(index, 1, { ...slugs[index], ...action.payload });\n\n    //   state.data = slugs;\n    //   // const slugs = [...state.chips].filter(\n    //   //   (x) => x.id !== action.payload.id\n    //   // );\n    //   // state.chips = slugs;\n    // },\n  }\n});\n\nexport const {\n  addChip,\n  removeChip\n} = ChipSlice.actions;\nexport default ChipSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","chips","ChipSlice","name","reducers","addChip","state","action","push","payload","removeChip","slugs","index","findIndex","x","id","splice","actions","reducer"],"sources":["D:/list react/my-list-items/src/containers/landing/components/Chip/chipSlice.tsx"],"sourcesContent":["import { PayloadAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport type ChipState = {\r\n  chips: any[];\r\n}\r\n\r\nconst initialState: ChipState = {\r\n  chips: []\r\n};\r\n\r\nexport const ChipSlice = createSlice({\r\n  name: \"chip\",\r\n  initialState,\r\n  reducers: {\r\n    addChip: (state, action: PayloadAction<any>) => {\r\n      state.chips.push(action.payload);\r\n    },\r\n    removeChip: (state, action: PayloadAction<any>) => {\r\n      let slugs = [...state.chips];\r\n\r\n      const index = slugs.findIndex((x) => x.id === action.payload.id);\r\n      slugs.splice(index, 1, { ...action.payload });\r\n\r\n      state.chips = slugs;\r\n    },\r\n    // removeChip: (state, action: PayloadAction<any>) => {\r\n    //   let slugs = [...state.data];\r\n\r\n    //   const index = slugs.findIndex((x) => x.id === action.payload.id);\r\n    //   slugs.splice(index, 1, { ...slugs[index], ...action.payload });\r\n\r\n    //   state.data = slugs;\r\n    //   // const slugs = [...state.chips].filter(\r\n    //   //   (x) => x.id !== action.payload.id\r\n    //   // );\r\n    //   // state.chips = slugs;\r\n    // },\r\n  }\r\n});\r\n\r\nexport const {\r\n  addChip,\r\n  removeChip\r\n} = ChipSlice.actions;\r\n\r\nexport default ChipSlice.reducer;\r\n"],"mappings":"AAAA,SAA0CA,WAAW,QAAQ,kBAAkB;AAM/E,MAAMC,YAAuB,GAAG;EAC9BC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAA0B,KAAK;MAC9CD,KAAK,CAACL,KAAK,CAACO,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAClC,CAAC;IACDC,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAA0B,KAAK;MACjD,IAAII,KAAK,GAAG,CAAC,GAAGL,KAAK,CAACL,KAAK,CAAC;MAE5B,MAAMW,KAAK,GAAGD,KAAK,CAACE,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKR,MAAM,CAACE,OAAO,CAACM,EAAE,CAAC;MAChEJ,KAAK,CAACK,MAAM,CAACJ,KAAK,EAAE,CAAC,EAAE;QAAE,GAAGL,MAAM,CAACE;MAAQ,CAAC,CAAC;MAE7CH,KAAK,CAACL,KAAK,GAAGU,KAAK;IACrB;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;EACF;AACF,CAAC,CAAC;;AAEF,OAAO,MAAM;EACXN,OAAO;EACPK;AACF,CAAC,GAAGR,SAAS,CAACe,OAAO;AAErB,eAAef,SAAS,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}